{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = componentWithName;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _isRegex = _interopRequireDefault(require(\"is-regex\"));\n\nvar _arrayPrototype = _interopRequireDefault(require(\"array.prototype.find\"));\n\nvar _getComponentName = _interopRequireDefault(require(\"./helpers/getComponentName\"));\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction stripHOCs(fullName, namesOfHOCsToStrip) {\n  var innerName = fullName;\n\n  while (/\\([^()]*\\)/g.test(innerName)) {\n    var HOC = innerName;\n    var previousHOC = void 0;\n\n    do {\n      previousHOC = HOC;\n      HOC = previousHOC.replace(/\\([^()]*\\)/g, '');\n    } while (previousHOC !== HOC);\n\n    if (namesOfHOCsToStrip.indexOf(HOC) === -1) {\n      return innerName;\n    }\n\n    innerName = innerName.replace(RegExp(\"^\".concat(HOC, \"\\\\(|\\\\)$\"), 'g'), '');\n  }\n\n  return innerName;\n}\n\nfunction hasName(name, namesOfHOCsToStrip, propValue, propName, componentName) {\n  for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {\n    rest[_key - 5] = arguments[_key];\n  }\n\n  if (Array.isArray(propValue)) {\n    return (0, _arrayPrototype[\"default\"])(propValue.map(function (item) {\n      return hasName.apply(void 0, [name, namesOfHOCsToStrip, item, propName, componentName].concat(rest));\n    }), Boolean) || null;\n  }\n\n  if (! /*#__PURE__*/_react[\"default\"].isValidElement(propValue)) {\n    return new TypeError(\"\".concat(componentName, \".\").concat(propName, \" is not a valid React element\"));\n  }\n\n  var type = propValue.type;\n  var componentNameFromType = (0, _getComponentName[\"default\"])(type);\n  var innerComponentName = namesOfHOCsToStrip.length > 0 ? stripHOCs(componentNameFromType, namesOfHOCsToStrip) : componentNameFromType;\n\n  if ((0, _isRegex[\"default\"])(name) && !name.test(innerComponentName)) {\n    return new TypeError(\"`\".concat(componentName, \".\").concat(propName, \"` only accepts components matching the regular expression \").concat(name));\n  }\n\n  if (!(0, _isRegex[\"default\"])(name) && innerComponentName !== name) {\n    return new TypeError(\"`\".concat(componentName, \".\").concat(propName, \"` only accepts components named \").concat(name, \", got \").concat(innerComponentName));\n  }\n\n  return null;\n}\n\nfunction componentWithName(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof name !== 'string' && !(0, _isRegex[\"default\"])(name)) {\n    throw new TypeError('name must be a string or a regex');\n  }\n\n  var passedOptions = Object.keys(options);\n\n  if (passedOptions.length > 1 || passedOptions.length === 1 && passedOptions[0] !== 'stripHOCs') {\n    throw new TypeError(\"The only options supported are: \\u201CstripHOCs\\u201D, got: \\u201C\".concat(passedOptions.join('”, “'), \"\\u201D\"));\n  }\n\n  var _options$stripHOCs = options.stripHOCs,\n      namesOfHOCsToStrip = _options$stripHOCs === void 0 ? [] : _options$stripHOCs;\n  var allHOCNamesAreValid = namesOfHOCsToStrip.every(function (x) {\n    if (typeof x !== 'string' || /[()]/g.test(x)) {\n      return false;\n    }\n\n    return /^(?:[a-z][a-zA-Z0-9]+|[A-Z][a-z][a-zA-Z0-9]+)$/.test(x);\n  });\n\n  if (!allHOCNamesAreValid) {\n    throw new TypeError('every provided HOC name must be a string with no parens, and in camelCase');\n  }\n\n  function componentWithNameValidator(props, propName, componentName) {\n    var propValue = props[propName];\n\n    if (props[propName] == null) {\n      return null;\n    }\n\n    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      rest[_key2 - 3] = arguments[_key2];\n    }\n\n    return hasName.apply(void 0, [name, namesOfHOCsToStrip, propValue, propName, componentName].concat(rest));\n  }\n\n  componentWithNameValidator.isRequired = function componentWithNameRequired(props, propName, componentName) {\n    var propValue = props[propName];\n\n    if (propValue == null) {\n      return new TypeError(\"`\".concat(componentName, \".\").concat(propName, \"` requires at least one component named \").concat(name));\n    }\n\n    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      rest[_key3 - 3] = arguments[_key3];\n    }\n\n    return hasName.apply(void 0, [name, namesOfHOCsToStrip, propValue, propName, componentName].concat(rest));\n  };\n\n  return (0, _wrapValidator[\"default\"])(componentWithNameValidator, \"componentWithName:\".concat(name), name);\n}","map":{"version":3,"mappings":"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","names":["stripHOCs","fullName","namesOfHOCsToStrip","innerName","test","HOC","previousHOC","replace","indexOf","RegExp","hasName","name","propValue","propName","componentName","rest","arguments","Array","isArray","map","item","Boolean","React","isValidElement","TypeError","type","componentNameFromType","innerComponentName","length","componentWithName","options","passedOptions","Object","keys","join","allHOCNamesAreValid","every","x","componentWithNameValidator","props","isRequired","componentWithNameRequired"],"sources":["/home/yair/Desktop/Programming/what i delete form project/node_modules/react-outside-click-handler/node_modules/airbnb-prop-types/src/componentWithName.js"],"sourcesContent":["import React from 'react';\nimport isRegex from 'is-regex';\nimport find from 'array.prototype.find';\n\nimport getComponentName from './helpers/getComponentName';\nimport wrapValidator from './helpers/wrapValidator';\n\nfunction stripHOCs(fullName, namesOfHOCsToStrip) {\n  let innerName = fullName;\n  while ((/\\([^()]*\\)/g).test(innerName)) {\n    let HOC = innerName;\n    let previousHOC;\n    do {\n      previousHOC = HOC;\n      HOC = previousHOC.replace(/\\([^()]*\\)/g, '');\n    } while (previousHOC !== HOC);\n\n    if (namesOfHOCsToStrip.indexOf(HOC) === -1) {\n      return innerName;\n    }\n    innerName = innerName.replace(RegExp(`^${HOC}\\\\(|\\\\)$`, 'g'), '');\n  }\n  return innerName;\n}\n\nfunction hasName(name, namesOfHOCsToStrip, propValue, propName, componentName, ...rest) {\n  if (Array.isArray(propValue)) {\n    return find(\n      propValue.map((item) => hasName(\n        name,\n        namesOfHOCsToStrip,\n        item,\n        propName,\n        componentName,\n        ...rest,\n      )),\n      Boolean,\n    ) || null;\n  }\n\n  if (!React.isValidElement(propValue)) {\n    return new TypeError(\n      `${componentName}.${propName} is not a valid React element`,\n    );\n  }\n\n  const { type } = propValue;\n  const componentNameFromType = getComponentName(type);\n  const innerComponentName = namesOfHOCsToStrip.length > 0\n    ? stripHOCs(componentNameFromType, namesOfHOCsToStrip)\n    : componentNameFromType;\n\n  if (isRegex(name) && !name.test(innerComponentName)) {\n    return new TypeError(\n      `\\`${componentName}.${propName}\\` only accepts components matching the regular expression ${name}`,\n    );\n  }\n\n  if (!isRegex(name) && innerComponentName !== name) {\n    return new TypeError(\n      `\\`${componentName}.${propName}\\` only accepts components named ${name}, got ${innerComponentName}`,\n    );\n  }\n\n  return null;\n}\n\nexport default function componentWithName(\n  name,\n  options = {},\n) {\n  if (typeof name !== 'string' && !isRegex(name)) {\n    throw new TypeError('name must be a string or a regex');\n  }\n\n  const passedOptions = Object.keys(options);\n  if (passedOptions.length > 1 || (passedOptions.length === 1 && passedOptions[0] !== 'stripHOCs')) {\n    throw new TypeError(`The only options supported are: “stripHOCs”, got: “${passedOptions.join('”, “')}”`);\n  }\n  const { stripHOCs: namesOfHOCsToStrip = [] } = options;\n\n  const allHOCNamesAreValid = namesOfHOCsToStrip.every((x) => {\n    if (typeof x !== 'string' || /[()]/g.test(x)) {\n      return false;\n    }\n    return /^(?:[a-z][a-zA-Z0-9]+|[A-Z][a-z][a-zA-Z0-9]+)$/.test(x);\n  });\n  if (!allHOCNamesAreValid) {\n    throw new TypeError('every provided HOC name must be a string with no parens, and in camelCase');\n  }\n\n  function componentWithNameValidator(props, propName, componentName, ...rest) {\n    const { [propName]: propValue } = props;\n    if (props[propName] == null) {\n      return null;\n    }\n    return hasName(name, namesOfHOCsToStrip, propValue, propName, componentName, ...rest);\n  }\n\n  componentWithNameValidator.isRequired = function componentWithNameRequired(\n    props,\n    propName,\n    componentName,\n    ...rest\n  ) {\n    const { [propName]: propValue } = props;\n    if (propValue == null) {\n      return new TypeError(`\\`${componentName}.${propName}\\` requires at least one component named ${name}`);\n    }\n    return hasName(name, namesOfHOCsToStrip, propValue, propName, componentName, ...rest);\n  };\n\n  return wrapValidator(componentWithNameValidator, `componentWithName:${name}`, name);\n}\n"]},"metadata":{},"sourceType":"script"}