{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n};\nexport const gfmTaskListItem = {\n  text: {\n    [codes.leftSquareBracket]: tasklistCheck\n  }\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n  /** @type {State} */\n\n  function open(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`');\n\n    if ( // Exit if there’s stuff before.\n    self.previous !== codes.eof || // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n  /** @type {State} */\n\n\n  function inside(code) {\n    // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n    // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function close(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok);\n    }\n\n    return nok(code);\n  }\n}\n/** @type {Tokenizer} */\n\n\nfunction spaceThenNonSpace(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, after, types.whitespace);\n  /** @type {State} */\n\n  function after(code) {\n    const tail = self.events[self.events.length - 1];\n    return (// We either found spaces…\n      (tail && tail[1].type === types.whitespace || // …or it was followed by a line ending, in which case, there has to be\n      // non-whitespace after that line ending, because otherwise we’d get an\n      // EOF as the content is closed with blank lines.\n      markdownLineEnding(code)) && code !== codes.eof ? ok(code) : nok(code)\n    );\n  }\n}","map":{"version":3,"names":["ok","assert","factorySpace","markdownLineEndingOrSpace","markdownLineEnding","codes","types","tasklistCheck","tokenize","tokenizeTasklistCheck","gfmTaskListItem","text","leftSquareBracket","effects","nok","self","open","code","previous","eof","_gfmTasklistFirstContentOfListItem","enter","consume","exit","inside","close","uppercaseX","lowercaseX","rightSquareBracket","check","spaceThenNonSpace","after","whitespace","tail","events","length","type"],"sources":["/home/yair/Desktop/Programming/what i delete form project/node_modules/micromark-extension-gfm-task-list-item/dev/lib/syntax.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\nconst tasklistCheck = {tokenize: tokenizeTasklistCheck}\n\nexport const gfmTaskListItem = {\n  text: {[codes.leftSquareBracket]: tasklistCheck}\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n\n  return open\n\n  /** @type {State} */\n  function open(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== codes.eof ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n    // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function close(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return effects.check({tokenize: spaceThenNonSpace}, ok, nok)\n    }\n\n    return nok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  const self = this\n\n  return factorySpace(effects, after, types.whitespace)\n\n  /** @type {State} */\n  function after(code) {\n    const tail = self.events[self.events.length - 1]\n\n    return (\n      // We either found spaces…\n      ((tail && tail[1].type === types.whitespace) ||\n        // …or it was followed by a line ending, in which case, there has to be\n        // non-whitespace after that line ending, because otherwise we’d get an\n        // EOF as the content is closed with blank lines.\n        markdownLineEnding(code)) &&\n        code !== codes.eof\n        ? ok(code)\n        : nok(code)\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}