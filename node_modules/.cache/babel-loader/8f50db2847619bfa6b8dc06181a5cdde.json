{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = shapeValidator;\n\nvar _isPlainObject = _interopRequireDefault(require(\"./helpers/isPlainObject\"));\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction shapeValidator(shapeTypes) {\n  if (!(0, _isPlainObject[\"default\"])(shapeTypes)) {\n    throw new TypeError('shape must be a normal object');\n  }\n\n  function shape(props, propName, componentName, location) {\n    var propValue = props[propName];\n\n    if (propValue == null) {\n      return null;\n    } // code adapted from PropTypes.shape: https://github.com/facebook/react/blob/14156e56b9cf18ac86963185c5af4abddf3ff811/src/isomorphic/classic/types/ReactPropTypes.js#L381\n    // eslint-disable-next-line guard-for-in, no-restricted-syntax\n\n\n    for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {\n      rest[_key - 4] = arguments[_key];\n    }\n\n    for (var key in shapeTypes) {\n      var checker = shapeTypes[key];\n\n      if (checker) {\n        var error = checker.apply(void 0, [propValue, key, componentName, location].concat(rest));\n\n        if (error) {\n          return error;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  shape.isRequired = function shapeRequired(props, propName, componentName) {\n    var propValue = props[propName];\n\n    if (propValue == null) {\n      return new TypeError(\"\".concat(componentName, \": \").concat(propName, \" is required.\"));\n    }\n\n    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      rest[_key2 - 3] = arguments[_key2];\n    }\n\n    return shape.apply(void 0, [props, propName, componentName].concat(rest));\n  };\n\n  return (0, _wrapValidator[\"default\"])(shape, 'shape', shapeTypes);\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEe,SAASA,cAAT,CAAwBC,UAAxB,EAAoC;EACjD,IAAI,CAAC,+BAAcA,UAAd,CAAL,EAAgC;IAC9B,MAAM,IAAIC,SAAJ,CAAc,+BAAd,CAAN;EACD;;EAED,SAASC,KAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgCC,aAAhC,EAA+CC,QAA/C,EAAkE;IAAA,IAC5CC,SAD4C,GAC9BJ,KAD8B,CACvDC,QADuD;;IAEhE,IAAIG,SAAS,IAAI,IAAjB,EAAuB;MACrB,OAAO,IAAP;IAH8D,EAKhE;IACA;;;IANgE,kCAANC,IAAM;MAANA,IAAM,UAANA,GAAMC,eAAND;IAAM;;IAOhE,KAAK,IAAME,GAAX,IAAkBV,UAAlB,EAA8B;MAC5B,IAAMW,OAAO,GAAGX,UAAU,CAACU,GAAD,CAA1B;;MACA,IAAIC,OAAJ,EAAa;QACX,IAAMC,KAAK,GAAGD,OAAO,MAAPA,UACZJ,SADY,EAEZG,GAFY,EAGZL,aAHY,EAIZC,QAJY,SAKTE,IALS,EAAd;;QAOA,IAAII,KAAJ,EAAW;UACT,OAAOA,KAAP;QACD;MACF;IACF;;IACD,OAAO,IAAP;EACD;;EAEDV,KAAK,CAACW,UAANX,GAAmB,SAASY,aAAT,CAAuBX,KAAvB,EAA8BC,QAA9B,EAAwCC,aAAxC,EAAgE;IAAA,IAC7DE,SAD6D,GAC/CJ,KAD+C,CACxEC,QADwE;;IAEjF,IAAIG,SAAS,IAAI,IAAjB,EAAuB;MACrB,OAAO,IAAIN,SAAJ,WAAiBI,aAAjB,eAAmCD,QAAnC,mBAAP;IACD;;IAJgF,mCAANI,IAAM;MAANA,IAAM,WAANA,GAAMC,gBAAND;IAAM;;IAKjF,OAAON,KAAK,MAALA,UAAMC,KAAN,EAAaC,QAAb,EAAuBC,aAAvB,SAAyCG,IAAzC,EAAP;EALF;;EAQA,OAAO,+BAAcN,KAAd,EAAqB,OAArB,EAA8BF,UAA9B,CAAP;AACD","names":["shapeValidator","shapeTypes","TypeError","shape","props","propName","componentName","location","propValue","rest","arguments","key","checker","error","isRequired","shapeRequired"],"sources":["/home/yair/Desktop/Programming/what i delete form project/node_modules/react-outside-click-handler/node_modules/airbnb-prop-types/src/shape.js"],"sourcesContent":["import isPlainObject from './helpers/isPlainObject';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function shapeValidator(shapeTypes) {\n  if (!isPlainObject(shapeTypes)) {\n    throw new TypeError('shape must be a normal object');\n  }\n\n  function shape(props, propName, componentName, location, ...rest) {\n    const { [propName]: propValue } = props;\n    if (propValue == null) {\n      return null;\n    }\n    // code adapted from PropTypes.shape: https://github.com/facebook/react/blob/14156e56b9cf18ac86963185c5af4abddf3ff811/src/isomorphic/classic/types/ReactPropTypes.js#L381\n    // eslint-disable-next-line guard-for-in, no-restricted-syntax\n    for (const key in shapeTypes) {\n      const checker = shapeTypes[key];\n      if (checker) {\n        const error = checker(\n          propValue,\n          key,\n          componentName,\n          location,\n          ...rest,\n        );\n        if (error) {\n          return error;\n        }\n      }\n    }\n    return null;\n  }\n\n  shape.isRequired = function shapeRequired(props, propName, componentName, ...rest) {\n    const { [propName]: propValue } = props;\n    if (propValue == null) {\n      return new TypeError(`${componentName}: ${propName} is required.`);\n    }\n    return shape(props, propName, componentName, ...rest);\n  };\n\n  return wrapValidator(shape, 'shape', shapeTypes);\n}\n"]},"metadata":{},"sourceType":"script"}