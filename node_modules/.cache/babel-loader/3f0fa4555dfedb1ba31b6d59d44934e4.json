{"ast":null,"code":"import seedrandom from 'seedrandom';\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nvar RNG = /*#__PURE__*/function () {\n  function RNG() {}\n\n  var _proto = RNG.prototype; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  _proto._seed = function _seed(seed, _opts) {\n    // TODO: add entropy and stuff\n    if (seed === (seed || 0)) {\n      return seed;\n    } else {\n      var strSeed = '' + seed;\n      var s = 0;\n\n      for (var k = 0; k < strSeed.length; ++k) {\n        s ^= strSeed.charCodeAt(k) | 0;\n      }\n\n      return s;\n    }\n  };\n\n  return RNG;\n}();\n\nvar RNGFunction = /*#__PURE__*/function (_RNG) {\n  _inheritsLoose(RNGFunction, _RNG);\n\n  function RNGFunction(thunk, opts) {\n    var _this;\n\n    _this = _RNG.call(this) || this;\n    _this._rng = void 0;\n\n    _this.seed(thunk, opts);\n\n    return _this;\n  }\n\n  var _proto = RNGFunction.prototype;\n\n  _proto.next = function next() {\n    return this._rng();\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ;\n\n  _proto.seed = function seed(thunk, _opts) {\n    this._rng = thunk;\n  };\n\n  _proto.clone = function clone(_, opts) {\n    return new RNGFunction(this._rng, opts);\n  };\n\n  _createClass(RNGFunction, [{\n    key: \"name\",\n    get: function get() {\n      return 'function';\n    }\n  }]);\n\n  return RNGFunction;\n}(RNG);\n/**\r\n * Construct an RNG with variable inputs. Used in calls to Random constructor\r\n * @param {...*} args - Distribution-specific arguments\r\n * @return RNG\r\n *\r\n * @example\r\n * new Random(RNGFactory(...args))\r\n */\n\n\nvar RNGFactory = function () {\n  var args = [].slice.call(arguments);\n  var _args = args,\n      _args$ = _args[0],\n      arg0 = _args$ === void 0 ? 'default' : _args$;\n\n  switch (typeof arg0) {\n    case 'object':\n      if (arg0 instanceof RNG) {\n        return arg0;\n      }\n\n      break;\n\n    case 'function':\n      return new RNGFunction(arg0);\n\n    case 'number':\n    case 'string':\n    default:\n      return new RNGFunction(seedrandom.apply(void 0, args));\n  }\n\n  throw new Error(\"invalid RNG \\\"\" + arg0 + \"\\\"\");\n};\n\nvar uniform = function (random, min, max) {\n  if (min === void 0) {\n    min = 0;\n  }\n\n  if (max === void 0) {\n    max = 1;\n  }\n\n  return function () {\n    return random.next() * (max - min) + min;\n  };\n};\n\nfunction numberValidator(num) {\n  return new NumberValidator(num);\n}\n\nvar NumberValidator = function NumberValidator(num) {\n  var _this = this;\n\n  this.n = void 0;\n\n  this.isInt = function () {\n    if (Number.isInteger(_this.n)) {\n      return _this;\n    }\n\n    throw new Error(\"Expected number to be an integer, got \" + _this.n);\n  };\n\n  this.isPositive = function () {\n    if (_this.n > 0) {\n      return _this;\n    }\n\n    throw new Error(\"Expected number to be positive, got \" + _this.n);\n  };\n\n  this.lessThan = function (v) {\n    if (_this.n < v) {\n      return _this;\n    }\n\n    throw new Error(\"Expected number to be less than \" + v + \", got \" + _this.n);\n  };\n\n  this.greaterThanOrEqual = function (v) {\n    if (_this.n >= v) {\n      return _this;\n    }\n\n    throw new Error(\"Expected number to be greater than or equal to \" + v + \", got \" + _this.n);\n  };\n\n  this.greaterThan = function (v) {\n    if (_this.n > v) {\n      return _this;\n    }\n\n    throw new Error(\"Expected number to be greater than \" + v + \", got \" + _this.n);\n  };\n\n  this.n = num;\n};\n\nvar uniformInt = function (random, min, max) {\n  if (min === void 0) {\n    min = 0;\n  }\n\n  if (max === void 0) {\n    max = 1;\n  }\n\n  if (max === undefined) {\n    max = min === undefined ? 1 : min;\n    min = 0;\n  }\n\n  numberValidator(min).isInt();\n  numberValidator(max).isInt();\n  return function () {\n    return Math.floor(random.next() * (max - min + 1) + min);\n  };\n};\n\nvar uniformBoolean = function (random) {\n  return function () {\n    return random.next() >= 0.5;\n  };\n};\n\nvar normal = function (random, mu, sigma) {\n  if (mu === void 0) {\n    mu = 0;\n  }\n\n  if (sigma === void 0) {\n    sigma = 1;\n  }\n\n  return function () {\n    var x, y, r;\n\n    do {\n      x = random.next() * 2 - 1;\n      y = random.next() * 2 - 1;\n      r = x * x + y * y;\n    } while (!r || r > 1);\n\n    return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);\n  };\n};\n\nvar logNormal = function (random, mu, sigma) {\n  if (mu === void 0) {\n    mu = 0;\n  }\n\n  if (sigma === void 0) {\n    sigma = 1;\n  }\n\n  var normal = random.normal(mu, sigma);\n  return function () {\n    return Math.exp(normal());\n  };\n};\n\nvar bernoulli = function (random, p) {\n  if (p === void 0) {\n    p = 0.5;\n  }\n\n  numberValidator(p).greaterThanOrEqual(0).lessThan(1);\n  return function () {\n    return Math.floor(random.next() + p);\n  };\n};\n\nvar binomial = function (random, n, p) {\n  if (n === void 0) {\n    n = 1;\n  }\n\n  if (p === void 0) {\n    p = 0.5;\n  }\n\n  numberValidator(n).isInt().isPositive();\n  numberValidator(p).greaterThanOrEqual(0).lessThan(1);\n  return function () {\n    var i = 0;\n    var x = 0;\n\n    while (i++ < n) {\n      if (random.next() < p) {\n        x++;\n      }\n    }\n\n    return x;\n  };\n};\n\nvar geometric = function (random, p) {\n  if (p === void 0) {\n    p = 0.5;\n  }\n\n  numberValidator(p).greaterThan(0).lessThan(1);\n  var invLogP = 1.0 / Math.log(1.0 - p);\n  return function () {\n    return Math.floor(1 + Math.log(random.next()) * invLogP);\n  };\n};\n\nvar logFactorialTable = [0.0, 0.0, 0.69314718055994529, 1.791759469228055, 3.1780538303479458, 4.7874917427820458, 6.5792512120101012, 8.5251613610654147, 10.604602902745251, 12.801827480081469];\n\nvar logFactorial = function logFactorial(k) {\n  return logFactorialTable[k];\n};\n\nvar logSqrt2PI = 0.91893853320467267;\n\nvar poisson = function (random, lambda) {\n  if (lambda === void 0) {\n    lambda = 1;\n  }\n\n  numberValidator(lambda).isPositive();\n\n  if (lambda < 10) {\n    // inversion method\n    var expMean = Math.exp(-lambda);\n    return function () {\n      var p = expMean;\n      var x = 0;\n      var u = random.next();\n\n      while (u > p) {\n        u = u - p;\n        p = lambda * p / ++x;\n      }\n\n      return x;\n    };\n  } else {\n    // generative method\n    var smu = Math.sqrt(lambda);\n    var b = 0.931 + 2.53 * smu;\n    var a = -0.059 + 0.02483 * b;\n    var invAlpha = 1.1239 + 1.1328 / (b - 3.4);\n    var vR = 0.9277 - 3.6224 / (b - 2);\n    return function () {\n      while (true) {\n        var u = void 0;\n        var v = random.next();\n\n        if (v <= 0.86 * vR) {\n          u = v / vR - 0.43;\n          return Math.floor((2 * a / (0.5 - Math.abs(u)) + b) * u + lambda + 0.445);\n        }\n\n        if (v >= vR) {\n          u = random.next() - 0.5;\n        } else {\n          u = v / vR - 0.93;\n          u = (u < 0 ? -0.5 : 0.5) - u;\n          v = random.next() * vR;\n        }\n\n        var us = 0.5 - Math.abs(u);\n\n        if (us < 0.013 && v > us) {\n          continue;\n        }\n\n        var k = Math.floor((2 * a / us + b) * u + lambda + 0.445);\n        v = v * invAlpha / (a / (us * us) + b);\n\n        if (k >= 10) {\n          var t = (k + 0.5) * Math.log(lambda / k) - lambda - logSqrt2PI + k - (1 / 12.0 - (1 / 360.0 - 1 / (1260.0 * k * k)) / (k * k)) / k;\n\n          if (Math.log(v * smu) <= t) {\n            return k;\n          }\n        } else if (k >= 0) {\n          var _logFactorial;\n\n          var f = (_logFactorial = logFactorial(k)) != null ? _logFactorial : 0;\n\n          if (Math.log(v) <= k * Math.log(lambda) - lambda - f) {\n            return k;\n          }\n        }\n      }\n    };\n  }\n};\n\nvar exponential = function (random, lambda) {\n  if (lambda === void 0) {\n    lambda = 1;\n  }\n\n  numberValidator(lambda).isPositive();\n  return function () {\n    return -Math.log(1 - random.next()) / lambda;\n  };\n};\n\nvar irwinHall = function (random, n) {\n  if (n === void 0) {\n    n = 1;\n  }\n\n  numberValidator(n).isInt().greaterThanOrEqual(0);\n  return function () {\n    var sum = 0;\n\n    for (var i = 0; i < n; ++i) {\n      sum += random.next();\n    }\n\n    return sum;\n  };\n};\n\nvar bates = function (random, n) {\n  if (n === void 0) {\n    n = 1;\n  }\n\n  numberValidator(n).isInt().isPositive();\n  var irwinHall = random.irwinHall(n);\n  return function () {\n    return irwinHall() / n;\n  };\n};\n\nvar pareto = function (random, alpha) {\n  if (alpha === void 0) {\n    alpha = 1;\n  }\n\n  numberValidator(alpha).greaterThanOrEqual(0);\n  var invAlpha = 1.0 / alpha;\n  return function () {\n    return 1.0 / Math.pow(1.0 - random.next(), invAlpha);\n  };\n};\n\nvar RNGMathRandom = /*#__PURE__*/function (_RNG) {\n  _inheritsLoose(RNGMathRandom, _RNG);\n\n  function RNGMathRandom() {\n    return _RNG.apply(this, arguments) || this;\n  }\n\n  var _proto = RNGMathRandom.prototype;\n\n  _proto.next = function next() {\n    return Math.random();\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ;\n\n  _proto.seed = function seed(_seed, _opts) {// intentionally empty\n  };\n\n  _proto.clone = function clone() {\n    return new RNGMathRandom();\n  };\n\n  _createClass(RNGMathRandom, [{\n    key: \"name\",\n    get: function get() {\n      return 'default';\n    }\n  }]);\n\n  return RNGMathRandom;\n}(RNG);\n/**\r\n * Seedable random number generator supporting many common distributions.\r\n *\r\n * Defaults to Math.random as its underlying pseudorandom number generator.\r\n *\r\n * @name Random\r\n * @class\r\n *\r\n * @param {RNG|function} [rng=Math.random] - Underlying pseudorandom number generator.\r\n */\n\n\nvar Random = /*#__PURE__*/function () {\n  function Random(rng) {\n    var _this = this;\n\n    this._rng = void 0;\n    this._patch = void 0;\n    this._cache = {};\n\n    this.next = function () {\n      return _this._rng.next();\n    };\n\n    this[\"float\"] = function (min, max) {\n      return _this.uniform(min, max)();\n    };\n\n    this[\"int\"] = function (min, max) {\n      return _this.uniformInt(min, max)();\n    };\n\n    this.integer = function (min, max) {\n      return _this.uniformInt(min, max)();\n    };\n\n    this.bool = function () {\n      return _this.uniformBoolean()();\n    };\n\n    this[\"boolean\"] = function () {\n      return _this.uniformBoolean()();\n    };\n\n    this.uniform = function (min, max) {\n      return _this._memoize('uniform', uniform, min, max);\n    };\n\n    this.uniformInt = function (min, max) {\n      return _this._memoize('uniformInt', uniformInt, min, max);\n    };\n\n    this.uniformBoolean = function () {\n      return _this._memoize('uniformBoolean', uniformBoolean);\n    };\n\n    this.normal = function (mu, sigma) {\n      return normal(_this, mu, sigma);\n    };\n\n    this.logNormal = function (mu, sigma) {\n      return logNormal(_this, mu, sigma);\n    };\n\n    this.bernoulli = function (p) {\n      return bernoulli(_this, p);\n    };\n\n    this.binomial = function (n, p) {\n      return binomial(_this, n, p);\n    };\n\n    this.geometric = function (p) {\n      return geometric(_this, p);\n    };\n\n    this.poisson = function (lambda) {\n      return poisson(_this, lambda);\n    };\n\n    this.exponential = function (lambda) {\n      return exponential(_this, lambda);\n    };\n\n    this.irwinHall = function (n) {\n      return irwinHall(_this, n);\n    };\n\n    this.bates = function (n) {\n      return bates(_this, n);\n    };\n\n    this.pareto = function (alpha) {\n      return pareto(_this, alpha);\n    };\n\n    if (rng && rng instanceof RNG) {\n      this.use(rng);\n    } else {\n      this.use(new RNGMathRandom());\n    }\n\n    this._cache = {};\n  }\n  /**\r\n   * @member {RNG} Underlying pseudo-random number generator\r\n   */\n\n\n  var _proto = Random.prototype;\n  /**\r\n   * Creates a new `Random` instance, optionally specifying parameters to\r\n   * set a new seed.\r\n   *\r\n   * @see RNG.clone\r\n   *\r\n   * @param {string} [seed] - Optional seed for new RNG.\r\n   * @param {object} [opts] - Optional config for new RNG options.\r\n   * @return {Random}\r\n   */\n\n  _proto.clone = function clone() {\n    var args = [].slice.call(arguments);\n\n    if (args.length) {\n      return new Random(RNGFactory.apply(void 0, args));\n    } else {\n      return new Random(this.rng.clone());\n    }\n  }\n  /**\r\n   * Sets the underlying pseudorandom number generator used via\r\n   * either an instance of `seedrandom`, a custom instance of RNG\r\n   * (for PRNG plugins), or a string specifying the PRNG to use\r\n   * along with an optional `seed` and `opts` to initialize the\r\n   * RNG.\r\n   *\r\n   * @example\r\n   * import random from 'random'\r\n   *\r\n   * random.use('example_seedrandom_string')\r\n   * // or\r\n   * random.use(seedrandom('kittens'))\r\n   * // or\r\n   * random.use(Math.random)\r\n   *\r\n   * @param {...*} args\r\n   */\n  ;\n\n  _proto.use = function use() {\n    this._rng = RNGFactory.apply(void 0, [].slice.call(arguments));\n  }\n  /**\r\n   * Patches `Math.random` with this Random instance's PRNG.\r\n   */\n  ;\n\n  _proto.patch = function patch() {\n    if (this._patch) {\n      throw new Error('Math.random already patched');\n    }\n\n    this._patch = Math.random;\n    Math.random = this.uniform();\n  }\n  /**\r\n   * Restores a previously patched `Math.random` to its original value.\r\n   */\n  ;\n\n  _proto.unpatch = function unpatch() {\n    if (this._patch) {\n      Math.random = this._patch;\n      delete this._patch;\n    }\n  } // --------------------------------------------------------------------------\n  // Uniform utility functions\n  // --------------------------------------------------------------------------\n\n  /**\r\n   * Convenience wrapper around `this.rng.next()`\r\n   *\r\n   * Returns a floating point number in [0, 1).\r\n   *\r\n   * @return {number}\r\n   */\n  ; // --------------------------------------------------------------------------\n  // Internal\n  // --------------------------------------------------------------------------\n\n  /**\r\n   * Memoizes distributions to ensure they're only created when necessary.\r\n   *\r\n   * Returns a thunk which that returns independent, identically distributed\r\n   * samples from the specified distribution.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {string} label - Name of distribution\r\n   * @param {function} getter - Function which generates a new distribution\r\n   * @param {...*} args - Distribution-specific arguments\r\n   *\r\n   * @return {function}\r\n   */\n\n\n  _proto._memoize = function _memoize(label, getter) {\n    var args = [].slice.call(arguments, 2);\n    var key = \"\" + args.join(';');\n    var value = this._cache[label];\n\n    if (value === undefined || value.key !== key) {\n      value = {\n        key: key,\n        distribution: getter.apply(void 0, [this].concat(args))\n      };\n      this._cache[label] = value;\n    }\n\n    return value.distribution;\n  };\n\n  _createClass(Random, [{\n    key: \"rng\",\n    get: function get() {\n      return this._rng;\n    }\n  }]);\n\n  return Random;\n}(); // defaults to Math.random as its RNG\n\n\nvar random = new Random();\nexport { RNG, RNGFactory, Random, random as default };","map":{"version":3,"mappings":"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","names":["RNG","_proto","_seed","seed","_opts","strSeed","s","k","length","charCodeAt","RNGFunction","_inheritsLoose","thunk","opts","_this","_rng","next","clone","_","_createClass","key","get","args","_args$","arg0","seedrandom","Error","random","min","max","numberValidator","num","NumberValidator","n","isInt","Number","isInteger","isPositive","lessThan","v","greaterThanOrEqual","greaterThan","undefined","Math","floor","mu","sigma","x","y","r","sqrt","log","normal","exp","p","i","invLogP","logFactorialTable","logFactorial","logSqrt2PI","lambda","expMean","u","smu","b","a","invAlpha","vR","abs","us","t","f","_logFactorial","sum","irwinHall","alpha","pow","RNGMathRandom","Random","rng","_patch","_cache","uniform","uniformInt","integer","bool","uniformBoolean","_memoize","logNormal","bernoulli","binomial","geometric","poisson","exponential","bates","pareto","use","RNGFactory","apply","patch","unpatch","label","getter","join","value","distribution","concat"],"sources":["/home/yair/Desktop/what i delete form project/node_modules/random/src/rng.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/generators/function.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/rng-factory.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/distributions/uniform.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/validation.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/distributions/uniform-int.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/distributions/uniform-boolean.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/distributions/normal.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/distributions/log-normal.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/distributions/bernoulli.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/distributions/binomial.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/distributions/geometric.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/distributions/poisson.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/distributions/exponential.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/distributions/irwin-hall.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/distributions/bates.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/distributions/pareto.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/generators/math-random.ts","/home/yair/Desktop/what i delete form project/node_modules/random/src/random.ts"],"sourcesContent":["export type SeedFn = () => number\nexport type SeedType = number | string | SeedFn | RNG\n\nexport default abstract class RNG {\n  abstract get name(): string\n\n  abstract next(): number\n\n  abstract seed(_seed?: SeedType, _opts?: Record<string, unknown>): void\n\n  abstract clone(_seed?: SeedType, _opts?: Record<string, unknown>): RNG\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _seed(seed: number, _opts?: Record<string, unknown>) {\n    // TODO: add entropy and stuff\n\n    if (seed === (seed || 0)) {\n      return seed\n    } else {\n      const strSeed = '' + seed\n      let s = 0\n\n      for (let k = 0; k < strSeed.length; ++k) {\n        s ^= strSeed.charCodeAt(k) | 0\n      }\n\n      return s\n    }\n  }\n}\n","import RNG, { SeedFn } from '../rng'\n\nexport default class RNGFunction extends RNG {\n  _rng: SeedFn\n\n  constructor(thunk: SeedFn, opts?: Record<string, unknown>) {\n    super()\n\n    this.seed(thunk, opts)\n  }\n\n  get name() {\n    return 'function'\n  }\n\n  next() {\n    return this._rng()\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  seed(thunk: SeedFn, _opts?: Record<string, unknown>) {\n    this._rng = thunk\n  }\n\n  clone(_: undefined, opts: Record<string, unknown>) {\n    return new RNGFunction(this._rng, opts)\n  }\n}\n","import seedrandom from 'seedrandom'\n\nimport RNG from './rng'\nimport RNGFunction from './generators/function'\n\n/**\n * Construct an RNG with variable inputs. Used in calls to Random constructor\n * @param {...*} args - Distribution-specific arguments\n * @return RNG\n *\n * @example\n * new Random(RNGFactory(...args))\n */\nexport default <T extends any[]>(...args: T) => {\n  const [arg0 = 'default'] = args\n\n  switch (typeof arg0) {\n    case 'object':\n      if (arg0 instanceof RNG) {\n        return arg0\n      }\n      break\n\n    case 'function':\n      return new RNGFunction(arg0)\n\n    case 'number':\n    case 'string':\n    default:\n      return new RNGFunction(seedrandom(...args))\n  }\n\n  throw new Error(`invalid RNG \"${arg0}\"`)\n}\n","import { Random } from '../random'\n\nexport default (random: Random, min = 0, max = 1) => {\n  return () => {\n    return random.next() * (max - min) + min\n  }\n}\n","export function numberValidator(num: number) {\n  return new NumberValidator(num)\n}\n\nexport class NumberValidator {\n  private n: number\n  constructor(num: number) {\n    this.n = num\n  }\n\n  public isInt = (): this => {\n    if (Number.isInteger(this.n)) {\n      return this\n    }\n    throw new Error(`Expected number to be an integer, got ${this.n}`)\n  }\n\n  public isPositive = (): this => {\n    if (this.n > 0) {\n      return this\n    }\n    throw new Error(`Expected number to be positive, got ${this.n}`)\n  }\n\n  public lessThan = (v: number): this => {\n    if (this.n < v) {\n      return this\n    }\n    throw new Error(`Expected number to be less than ${v}, got ${this.n}`)\n  }\n\n  public greaterThanOrEqual = (v: number): this => {\n    if (this.n >= v) {\n      return this\n    }\n    throw new Error(\n      `Expected number to be greater than or equal to ${v}, got ${this.n}`\n    )\n  }\n\n  public greaterThan = (v: number): this => {\n    if (this.n > v) {\n      return this\n    }\n    throw new Error(`Expected number to be greater than ${v}, got ${this.n}`)\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, min = 0, max = 1) => {\n  if (max === undefined) {\n    max = min === undefined ? 1 : min\n    min = 0\n  }\n\n  numberValidator(min).isInt()\n  numberValidator(max).isInt()\n\n  return () => {\n    return Math.floor(random.next() * (max - min + 1) + min)\n  }\n}\n","import { Random } from '../random'\n\nexport default (random: Random) => {\n  return () => {\n    return random.next() >= 0.5\n  }\n}\n","import { Random } from '../random'\n\nexport default (random: Random, mu = 0, sigma = 1) => {\n  return () => {\n    let x: number, y: number, r: number\n\n    do {\n      x = random.next() * 2 - 1\n      y = random.next() * 2 - 1\n      r = x * x + y * y\n    } while (!r || r > 1)\n\n    return mu + sigma * y * Math.sqrt((-2 * Math.log(r)) / r)\n  }\n}\n","import { Random } from '../random'\n\nexport default (random: Random, mu = 0, sigma = 1) => {\n  const normal = random.normal(mu, sigma)\n  return () => {\n    return Math.exp(normal())\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, p = 0.5) => {\n  numberValidator(p).greaterThanOrEqual(0).lessThan(1)\n\n  return () => {\n    return Math.floor(random.next() + p)\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, n = 1, p = 0.5) => {\n  numberValidator(n).isInt().isPositive()\n  numberValidator(p).greaterThanOrEqual(0).lessThan(1)\n\n  return () => {\n    let i = 0\n    let x = 0\n\n    while (i++ < n) {\n      if (random.next() < p) {\n        x++\n      }\n    }\n    return x\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, p = 0.5) => {\n  numberValidator(p).greaterThan(0).lessThan(1)\n  const invLogP = 1.0 / Math.log(1.0 - p)\n\n  return () => {\n    return Math.floor(1 + Math.log(random.next()) * invLogP)\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nconst logFactorialTable = [\n  0.0, 0.0, 0.69314718055994529, 1.791759469228055, 3.1780538303479458,\n  4.7874917427820458, 6.5792512120101012, 8.5251613610654147,\n  10.604602902745251, 12.801827480081469\n]\n\nconst logFactorial = (k: number) => {\n  return logFactorialTable[k]\n}\n\nconst logSqrt2PI = 0.91893853320467267\n\nexport default (random: Random, lambda = 1) => {\n  numberValidator(lambda).isPositive()\n\n  if (lambda < 10) {\n    // inversion method\n    const expMean = Math.exp(-lambda)\n\n    return () => {\n      let p = expMean\n      let x = 0\n      let u = random.next()\n\n      while (u > p) {\n        u = u - p\n        p = (lambda * p) / ++x\n      }\n\n      return x\n    }\n  } else {\n    // generative method\n    const smu = Math.sqrt(lambda)\n    const b = 0.931 + 2.53 * smu\n    const a = -0.059 + 0.02483 * b\n    const invAlpha = 1.1239 + 1.1328 / (b - 3.4)\n    const vR = 0.9277 - 3.6224 / (b - 2)\n\n    return () => {\n      while (true) {\n        let u\n        let v = random.next()\n\n        if (v <= 0.86 * vR) {\n          u = v / vR - 0.43\n          return Math.floor(\n            ((2 * a) / (0.5 - Math.abs(u)) + b) * u + lambda + 0.445\n          )\n        }\n\n        if (v >= vR) {\n          u = random.next() - 0.5\n        } else {\n          u = v / vR - 0.93\n          u = (u < 0 ? -0.5 : 0.5) - u\n          v = random.next() * vR\n        }\n\n        const us = 0.5 - Math.abs(u)\n        if (us < 0.013 && v > us) {\n          continue\n        }\n\n        const k = Math.floor(((2 * a) / us + b) * u + lambda + 0.445)\n        v = (v * invAlpha) / (a / (us * us) + b)\n\n        if (k >= 10) {\n          const t =\n            (k + 0.5) * Math.log(lambda / k) -\n            lambda -\n            logSqrt2PI +\n            k -\n            (1 / 12.0 - (1 / 360.0 - 1 / (1260.0 * k * k)) / (k * k)) / k\n\n          if (Math.log(v * smu) <= t) {\n            return k\n          }\n        } else if (k >= 0) {\n          const f = logFactorial(k) ?? 0\n\n          if (Math.log(v) <= k * Math.log(lambda) - lambda - f) {\n            return k\n          }\n        }\n      }\n    }\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, lambda = 1) => {\n  numberValidator(lambda).isPositive()\n\n  return () => {\n    return -Math.log(1 - random.next()) / lambda\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, n = 1) => {\n  numberValidator(n).isInt().greaterThanOrEqual(0)\n\n  return () => {\n    let sum = 0\n    for (let i = 0; i < n; ++i) {\n      sum += random.next()\n    }\n\n    return sum\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, n = 1) => {\n  numberValidator(n).isInt().isPositive()\n  const irwinHall = random.irwinHall(n)\n\n  return () => {\n    return irwinHall() / n\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, alpha = 1) => {\n  numberValidator(alpha).greaterThanOrEqual(0)\n  const invAlpha = 1.0 / alpha\n\n  return () => {\n    return 1.0 / Math.pow(1.0 - random.next(), invAlpha)\n  }\n}\n","import RNG from '../rng'\n\nexport default class RNGMathRandom extends RNG {\n  get name() {\n    return 'default'\n  }\n\n  next() {\n    return Math.random()\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  seed(_seed: unknown, _opts: Record<string, unknown>) {\n    // intentionally empty\n  }\n\n  clone() {\n    return new RNGMathRandom()\n  }\n}\n","import RNG from './rng'\nimport RNGFactory from './rng-factory'\n\nimport uniform from './distributions/uniform'\nimport uniformInt from './distributions/uniform-int'\nimport uniformBoolean from './distributions/uniform-boolean'\nimport normal from './distributions/normal'\nimport logNormal from './distributions/log-normal'\nimport bernoulli from './distributions/bernoulli'\nimport binomial from './distributions/binomial'\nimport geometric from './distributions/geometric'\nimport poisson from './distributions/poisson'\nimport exponential from './distributions/exponential'\nimport irwinHall from './distributions/irwin-hall'\nimport bates from './distributions/bates'\nimport pareto from './distributions/pareto'\nimport RNGMathRandom from './generators/math-random'\n\n/**\n * Distribution function\n */\ninterface IDistFn<R> {\n  (random: Random, ...argv: any): R\n}\n\n/**\n * Distribution\n */\ninterface IDist<R> {\n  (): R\n}\n\n/**\n * Keyed cache entry\n */\ninterface ICacheEntry<T> {\n  key: string\n  distribution: () => T\n}\n\nexport { RNG, RNGFactory }\n\n/**\n * Seedable random number generator supporting many common distributions.\n *\n * Defaults to Math.random as its underlying pseudorandom number generator.\n *\n * @name Random\n * @class\n *\n * @param {RNG|function} [rng=Math.random] - Underlying pseudorandom number generator.\n */\nexport class Random {\n  protected _rng: RNG\n  protected _patch: typeof Math.random | undefined\n  protected _cache: {\n    [k: string]: ICacheEntry<any>\n  } = {}\n\n  constructor(rng?: RNG) {\n    if (rng && rng instanceof RNG) {\n      this.use(rng)\n    } else {\n      this.use(new RNGMathRandom())\n    }\n    this._cache = {}\n  }\n\n  /**\n   * @member {RNG} Underlying pseudo-random number generator\n   */\n  get rng() {\n    return this._rng\n  }\n\n  /**\n   * Creates a new `Random` instance, optionally specifying parameters to\n   * set a new seed.\n   *\n   * @see RNG.clone\n   *\n   * @param {string} [seed] - Optional seed for new RNG.\n   * @param {object} [opts] - Optional config for new RNG options.\n   * @return {Random}\n   */\n  clone<T>(...args: [T]): Random {\n    if (args.length) {\n      return new Random(RNGFactory(...args))\n    } else {\n      return new Random(this.rng.clone())\n    }\n  }\n\n  /**\n   * Sets the underlying pseudorandom number generator used via\n   * either an instance of `seedrandom`, a custom instance of RNG\n   * (for PRNG plugins), or a string specifying the PRNG to use\n   * along with an optional `seed` and `opts` to initialize the\n   * RNG.\n   *\n   * @example\n   * import random from 'random'\n   *\n   * random.use('example_seedrandom_string')\n   * // or\n   * random.use(seedrandom('kittens'))\n   * // or\n   * random.use(Math.random)\n   *\n   * @param {...*} args\n   */\n  use(...args: [RNG]) {\n    this._rng = RNGFactory(...args)\n  }\n\n  /**\n   * Patches `Math.random` with this Random instance's PRNG.\n   */\n  patch() {\n    if (this._patch) {\n      throw new Error('Math.random already patched')\n    }\n\n    this._patch = Math.random\n    Math.random = this.uniform()\n  }\n\n  /**\n   * Restores a previously patched `Math.random` to its original value.\n   */\n  unpatch() {\n    if (this._patch) {\n      Math.random = this._patch\n      delete this._patch\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  // Uniform utility functions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Convenience wrapper around `this.rng.next()`\n   *\n   * Returns a floating point number in [0, 1).\n   *\n   * @return {number}\n   */\n  next = (): number => {\n    return this._rng.next()\n  }\n\n  /**\n   * Samples a uniform random floating point number, optionally specifying\n   * lower and upper bounds.\n   *\n   * Convence wrapper around `random.uniform()`\n   *\n   * @param {number} [min=0] - Lower bound (float, inclusive)\n   * @param {number} [max=1] - Upper bound (float, exclusive)\n   * @return {number}\n   */\n  float = (min?: number, max?: number): number => {\n    return this.uniform(min, max)()\n  }\n\n  /**\n   * Samples a uniform random integer, optionally specifying lower and upper\n   * bounds.\n   *\n   * Convence wrapper around `random.uniformInt()`\n   *\n   * @param {number} [min=0] - Lower bound (integer, inclusive)\n   * @param {number} [max=1] - Upper bound (integer, inclusive)\n   * @return {number}\n   */\n  int = (min?: number, max?: number) => {\n    return this.uniformInt(min, max)()\n  }\n\n  /**\n   * Samples a uniform random integer, optionally specifying lower and upper\n   * bounds.\n   *\n   * Convence wrapper around `random.uniformInt()`\n   *\n   * @alias `random.int`\n   *\n   * @param {number} [min=0] - Lower bound (integer, inclusive)\n   * @param {number} [max=1] - Upper bound (integer, inclusive)\n   * @return {number}\n   */\n  integer = (min?: number, max?: number) => {\n    return this.uniformInt(min, max)()\n  }\n\n  /**\n   * Samples a uniform random boolean value.\n   *\n   * Convence wrapper around `random.uniformBoolean()`\n   *\n   * @alias `random.boolean`\n   *\n   * @return {boolean}\n   */\n  bool = () => {\n    return this.uniformBoolean()()\n  }\n\n  /**\n   * Samples a uniform random boolean value.\n   *\n   * Convence wrapper around `random.uniformBoolean()`\n   *\n   * @return {boolean}\n   */\n  boolean = () => {\n    return this.uniformBoolean()()\n  }\n\n  // --------------------------------------------------------------------------\n  // Uniform distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Continuous uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)).\n   *\n   * @param {number} [min=0] - Lower bound (float, inclusive)\n   * @param {number} [max=1] - Upper bound (float, exclusive)\n   * @return {function}\n   */\n  uniform = (min?: number, max?: number) => {\n    return this._memoize<number>('uniform', uniform, min, max)\n  }\n\n  /**\n   * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution).\n   *\n   * @param {number} [min=0] - Lower bound (integer, inclusive)\n   * @param {number} [max=1] - Upper bound (integer, inclusive)\n   * @return {function}\n   */\n  uniformInt = (min?: number, max?: number) => {\n    return this._memoize<number>('uniformInt', uniformInt, min, max)\n  }\n\n  /**\n   * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution),\n   * with two possible outcomes, `true` or `false.\n   *\n   * This method is analogous to flipping a coin.\n   *\n   * @return {function}\n   */\n  uniformBoolean = () => {\n    return this._memoize<boolean>('uniformBoolean', uniformBoolean)\n  }\n\n  // --------------------------------------------------------------------------\n  // Normal distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution).\n   *\n   * @param {number} [mu=0] - Mean\n   * @param {number} [sigma=1] - Standard deviation\n   * @return {function}\n   */\n  normal = (mu?: number, sigma?: number) => {\n    return normal(this, mu, sigma)\n  }\n\n  /**\n   * Generates a [Log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution).\n   *\n   * @param {number} [mu=0] - Mean of underlying normal distribution\n   * @param {number} [sigma=1] - Standard deviation of underlying normal distribution\n   * @return {function}\n   */\n  logNormal = (mu?: number, sigma?: number) => {\n    return logNormal(this, mu, sigma)\n  }\n\n  // --------------------------------------------------------------------------\n  // Bernoulli distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Bernoulli distribution](https://en.wikipedia.org/wiki/Bernoulli_distribution).\n   *\n   * @param {number} [p=0.5] - Success probability of each trial.\n   * @return {function}\n   */\n  bernoulli = (p?: number) => {\n    return bernoulli(this, p)\n  }\n\n  /**\n   * Generates a [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution).\n   *\n   * @param {number} [n=1] - Number of trials.\n   * @param {number} [p=0.5] - Success probability of each trial.\n   * @return {function}\n   */\n  binomial = (n?: number, p?: number) => {\n    return binomial(this, n, p)\n  }\n\n  /**\n   * Generates a [Geometric distribution](https://en.wikipedia.org/wiki/Geometric_distribution).\n   *\n   * @param {number} [p=0.5] - Success probability of each trial.\n   * @return {function}\n   */\n  geometric = (p?: number) => {\n    return geometric(this, p)\n  }\n\n  // --------------------------------------------------------------------------\n  // Poisson distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution).\n   *\n   * @param {number} [lambda=1] - Mean (lambda > 0)\n   * @return {function}\n   */\n  poisson = (lambda?: number) => {\n    return poisson(this, lambda)\n  }\n\n  /**\n   * Generates an [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution).\n   *\n   * @param {number} [lambda=1] - Inverse mean (lambda > 0)\n   * @return {function}\n   */\n  exponential = (lambda?: number) => {\n    return exponential(this, lambda)\n  }\n\n  // --------------------------------------------------------------------------\n  // Misc distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates an [Irwin Hall distribution](https://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution).\n   *\n   * @param {number} [n=1] - Number of uniform samples to sum (n >= 0)\n   * @return {function}\n   */\n  irwinHall = (n?: number) => {\n    return irwinHall(this, n)\n  }\n\n  /**\n   * Generates a [Bates distribution](https://en.wikipedia.org/wiki/Bates_distribution).\n   *\n   * @param {number} [n=1] - Number of uniform samples to average (n >= 1)\n   * @return {function}\n   */\n  bates = (n?: number) => {\n    return bates(this, n)\n  }\n\n  /**\n   * Generates a [Pareto distribution](https://en.wikipedia.org/wiki/Pareto_distribution).\n   *\n   * @param {number} [alpha=1] - Alpha\n   * @return {function}\n   */\n  pareto = (alpha?: number) => {\n    return pareto(this, alpha)\n  }\n\n  // --------------------------------------------------------------------------\n  // Internal\n  // --------------------------------------------------------------------------\n\n  /**\n   * Memoizes distributions to ensure they're only created when necessary.\n   *\n   * Returns a thunk which that returns independent, identically distributed\n   * samples from the specified distribution.\n   *\n   * @private\n   *\n   * @param {string} label - Name of distribution\n   * @param {function} getter - Function which generates a new distribution\n   * @param {...*} args - Distribution-specific arguments\n   *\n   * @return {function}\n   */\n  _memoize<T>(label: string, getter: IDistFn<any>, ...args: any[]): IDist<T> {\n    const key = `${args.join(';')}`\n    let value = this._cache[label]\n\n    if (value === undefined || value.key !== key) {\n      value = {\n        key,\n        distribution: getter(this, ...args)\n      }\n      this._cache[label] = value\n    }\n\n    return value.distribution\n  }\n}\n\n// defaults to Math.random as its RNG\nexport default new Random()\n"]},"metadata":{},"sourceType":"module"}