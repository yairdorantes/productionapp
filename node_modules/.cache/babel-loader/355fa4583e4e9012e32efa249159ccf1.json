{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = elementTypeValidator;\n\nvar _propTypes = require(\"prop-types\");\n\nvar _reactIs = require(\"react-is\");\n\nvar _and = _interopRequireDefault(require(\"./and\"));\n\nvar _getComponentName = _interopRequireDefault(require(\"./helpers/getComponentName\"));\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction getTypeName(Type) {\n  if (typeof Type === 'string') {\n    return Type;\n  }\n\n  var type = (0, _getComponentName[\"default\"])(Type);\n  /* istanbul ignore next */\n  // in environments where functions do not have names\n\n  return type || 'Anonymous Component';\n}\n\nfunction validateElementType(Type, props, propName, componentName) {\n  var type = props[propName].type;\n\n  if (type === Type) {\n    return null;\n  }\n\n  return new TypeError(\"\".concat(componentName, \".\").concat(propName, \" must be a React element of type \").concat(getTypeName(Type)));\n}\n\nfunction elementTypeValidator(Type) {\n  if (Type === '*') {\n    return (0, _wrapValidator[\"default\"])(_propTypes.element, 'elementType(*)', Type);\n  }\n\n  if (!(0, _reactIs.isValidElementType)(Type)) {\n    throw new TypeError(\"Type must be a React Component, an HTML element tag name, or \\\"*\\\". Got an \".concat(_typeof(Type)));\n  }\n\n  function elementType(props, propName, componentName) {\n    if (props[propName] == null) {\n      return null;\n    }\n\n    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      rest[_key - 3] = arguments[_key];\n    }\n\n    return validateElementType.apply(void 0, [Type, props, propName, componentName].concat(rest));\n  }\n\n  elementType.isRequired = elementType; // covered by and + element\n\n  var typeName = getTypeName(Type);\n  var validatorName = \"elementType(\".concat(typeName, \")\");\n  return (0, _wrapValidator[\"default\"])((0, _and[\"default\"])([_propTypes.element, elementType], validatorName), validatorName, Type);\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,WAAT,CAAqBC,IAArB,EAA2B;EACzB,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;IAC5B,OAAOA,IAAP;EACD;;EACD,IAAMC,IAAI,GAAG,kCAAiBD,IAAjB,CAAb;EAEA;EAA2B;;EAC3B,OAAOC,IAAI,IAAI,qBAAf;AACD;;AAED,SAASC,mBAAT,CAA6BF,IAA7B,EAAmCG,KAAnC,EAA0CC,QAA1C,EAAoDC,aAApD,EAAmE;EAAA,IACzDJ,IADyD,GAChDE,KAAK,CAACC,QAAD,CAALD,CAATF,IADyD;;EAGjE,IAAIA,IAAI,KAAKD,IAAb,EAAmB;IACjB,OAAO,IAAP;EACD;;EAED,OAAO,IAAIM,SAAJ,WAAiBD,aAAjB,cAAkCD,QAAlC,8CAA8EL,WAAW,CAACC,IAAD,CAAzF,EAAP;AACD;;AAEc,SAASO,oBAAT,CAA8BP,IAA9B,EAAoC;EACjD,IAAIA,IAAI,KAAK,GAAb,EAAkB;IAChB,OAAO,+BAAcQ,kBAAd,EAAuB,gBAAvB,EAAyCR,IAAzC,CAAP;EACD;;EAED,IAAI,CAAC,iCAAmBA,IAAnB,CAAL,EAA+B;IAC7B,MAAM,IAAIM,SAAJ,8FAAiGN,IAAjG,GAAN;EACD;;EAED,SAASS,WAAT,CAAqBN,KAArB,EAA4BC,QAA5B,EAAsCC,aAAtC,EAA8D;IAC5D,IAAIF,KAAK,CAACC,QAAD,CAALD,IAAmB,IAAvB,EAA6B;MAC3B,OAAO,IAAP;IACD;;IAH2D,kCAANO,IAAM;MAANA,IAAM,UAANA,GAAMC,eAAND;IAAM;;IAI5D,OAAOR,mBAAmB,MAAnBA,UAAoBF,IAApB,EAA0BG,KAA1B,EAAiCC,QAAjC,EAA2CC,aAA3C,SAA6DK,IAA7D,EAAP;EACD;;EACDD,WAAW,CAACG,UAAZH,GAAyBA,WAAzBA,CAfiD,CAeX;;EAEtC,IAAMI,QAAQ,GAAGd,WAAW,CAACC,IAAD,CAA5B;EACA,IAAMc,aAAa,yBAAkBD,QAAlB,MAAnB;EACA,OAAO,+BAAc,qBAAI,CAACL,kBAAD,EAAUC,WAAV,CAAJ,EAA4BK,aAA5B,CAAd,EAA0DA,aAA1D,EAAyEd,IAAzE,CAAP;AACD","names":["getTypeName","Type","type","validateElementType","props","propName","componentName","TypeError","elementTypeValidator","element","elementType","rest","arguments","isRequired","typeName","validatorName"],"sources":["/home/yair/Desktop/Programming/what i delete form project/node_modules/react-outside-click-handler/node_modules/airbnb-prop-types/src/elementType.js"],"sourcesContent":["import { element } from 'prop-types';\nimport { isValidElementType } from 'react-is';\n\nimport and from './and';\nimport getComponentName from './helpers/getComponentName';\nimport wrapValidator from './helpers/wrapValidator';\n\nfunction getTypeName(Type) {\n  if (typeof Type === 'string') {\n    return Type;\n  }\n  const type = getComponentName(Type);\n\n  /* istanbul ignore next */ // in environments where functions do not have names\n  return type || 'Anonymous Component';\n}\n\nfunction validateElementType(Type, props, propName, componentName) {\n  const { type } = props[propName];\n\n  if (type === Type) {\n    return null;\n  }\n\n  return new TypeError(`${componentName}.${propName} must be a React element of type ${getTypeName(Type)}`);\n}\n\nexport default function elementTypeValidator(Type) {\n  if (Type === '*') {\n    return wrapValidator(element, 'elementType(*)', Type);\n  }\n\n  if (!isValidElementType(Type)) {\n    throw new TypeError(`Type must be a React Component, an HTML element tag name, or \"*\". Got an ${typeof Type}`);\n  }\n\n  function elementType(props, propName, componentName, ...rest) {\n    if (props[propName] == null) {\n      return null;\n    }\n    return validateElementType(Type, props, propName, componentName, ...rest);\n  }\n  elementType.isRequired = elementType; // covered by and + element\n\n  const typeName = getTypeName(Type);\n  const validatorName = `elementType(${typeName})`;\n  return wrapValidator(and([element, elementType], validatorName), validatorName, Type);\n}\n"]},"metadata":{},"sourceType":"script"}