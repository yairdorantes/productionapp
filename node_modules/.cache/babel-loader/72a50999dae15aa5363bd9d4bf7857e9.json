{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = stringStartsWithValidator;\n\nvar _propTypes = require(\"prop-types\");\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction stringStartsWithValidator(start) {\n  if (typeof start !== 'string' || start.length === 0) {\n    throw new TypeError('a non-empty string is required');\n  }\n\n  var validator = function stringStartsWith(props, propName, componentName) {\n    var propValue = props[propName];\n\n    if (propValue == null) {\n      return null;\n    }\n\n    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      rest[_key - 3] = arguments[_key];\n    }\n\n    var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));\n\n    if (stringError) {\n      return stringError;\n    }\n\n    if (!propValue.startsWith(start) || propValue.length <= start.length) {\n      return new TypeError(\"\".concat(componentName, \": \").concat(propName, \" does not start with \\\"\").concat(start, \"\\\"\"));\n    }\n\n    return null;\n  };\n\n  validator.isRequired = function requiredStringStartsWith() {\n    var stringError = _propTypes.string.isRequired.apply(_propTypes.string, arguments);\n\n    if (stringError) {\n      return stringError;\n    }\n\n    return validator.apply(void 0, arguments);\n  };\n\n  return (0, _wrapValidator[\"default\"])(validator, \"stringStartsWith: \".concat(start));\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEe,SAASA,yBAAT,CAAmCC,KAAnC,EAA0C;EACvD,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,MAAND,KAAiB,CAAlD,EAAqD;IACnD,MAAM,IAAIE,SAAJ,CAAc,gCAAd,CAAN;EACD;;EAED,IAAMC,SAAS,GAAG,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,QAAjC,EAA2CC,aAA3C,EAAmE;IAAA,IAC/DC,SAD+D,GACjDH,KADiD,CAC1EC,QAD0E;;IAGnF,IAAIE,SAAS,IAAI,IAAjB,EAAuB;MACrB,OAAO,IAAP;IACD;;IALkF,kCAANC,IAAM;MAANA,IAAM,UAANA,GAAMC,eAAND;IAAM;;IAOnF,IAAME,WAAW,GAAGC,iCAAOP,KAAPO,EAAcN,QAAdM,EAAwBL,aAAxBK,SAA0CH,IAA1CG,EAApB;;IACA,IAAID,WAAJ,EAAiB;MACf,OAAOA,WAAP;IACD;;IAED,IAAI,CAACH,SAAS,CAACK,UAAVL,CAAqBR,KAArBQ,CAAD,IAAgCA,SAAS,CAACP,MAAVO,IAAoBR,KAAK,CAACC,MAA9D,EAAsE;MACpE,OAAO,IAAIC,SAAJ,WAAiBK,aAAjB,eAAmCD,QAAnC,oCAAoEN,KAApE,QAAP;IACD;;IACD,OAAO,IAAP;EAfF;;EAkBAG,SAAS,CAACW,UAAVX,GAAuB,SAASY,wBAAT,GAA2C;IAChE,IAAMJ,WAAW,GAAGC,kBAAOE,UAAPF,oCAApB;;IACA,IAAID,WAAJ,EAAiB;MACf,OAAOA,WAAP;IACD;;IACD,OAAOR,SAAS,MAATA,mBAAP;EALF;;EAQA,OAAO,+BAAcA,SAAd,8BAA8CH,KAA9C,EAAP;AACD","names":["stringStartsWithValidator","start","length","TypeError","validator","stringStartsWith","props","propName","componentName","propValue","rest","arguments","stringError","string","startsWith","isRequired","requiredStringStartsWith"],"sources":["/home/yair/Desktop/Programming/what i delete form project/node_modules/react-outside-click-handler/node_modules/airbnb-prop-types/src/stringStartsWith.js"],"sourcesContent":["import { string } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function stringStartsWithValidator(start) {\n  if (typeof start !== 'string' || start.length === 0) {\n    throw new TypeError('a non-empty string is required');\n  }\n\n  const validator = function stringStartsWith(props, propName, componentName, ...rest) {\n    const { [propName]: propValue } = props;\n\n    if (propValue == null) {\n      return null;\n    }\n\n    const stringError = string(props, propName, componentName, ...rest);\n    if (stringError) {\n      return stringError;\n    }\n\n    if (!propValue.startsWith(start) || propValue.length <= start.length) {\n      return new TypeError(`${componentName}: ${propName} does not start with \"${start}\"`);\n    }\n    return null;\n  };\n\n  validator.isRequired = function requiredStringStartsWith(...args) {\n    const stringError = string.isRequired(...args);\n    if (stringError) {\n      return stringError;\n    }\n    return validator(...args);\n  };\n\n  return wrapValidator(validator, `stringStartsWith: ${start}`);\n}\n"]},"metadata":{},"sourceType":"script"}