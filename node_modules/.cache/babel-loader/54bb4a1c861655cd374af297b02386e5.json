{"ast":null,"code":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar react = require('react');\n/**\r\n * Hook used to detect clicks outside a component (or an escape key press). onTriggered function is triggered on `click`, `touch` or escape `keyup` event.\r\n *\r\n */\n\n\nfunction useDetectClickOutside(_a) {\n  var onTriggered = _a.onTriggered,\n      disableClick = _a.disableClick,\n      disableTouch = _a.disableTouch,\n      disableKeys = _a.disableKeys,\n      allowAnyKey = _a.allowAnyKey,\n      triggerKeys = _a.triggerKeys;\n  var ref = react.useRef(null);\n  var keyListener = react.useCallback(function (e) {\n    if (allowAnyKey) {\n      onTriggered(e);\n    } else if (triggerKeys) {\n      if (triggerKeys.includes(e.key)) {\n        onTriggered(e);\n      }\n    } else {\n      if (e.key === 'Escape') {\n        onTriggered(e);\n      }\n    }\n  }, [allowAnyKey, triggerKeys, onTriggered]);\n  var clickOrTouchListener = react.useCallback(function (e) {\n    if (ref && ref.current) {\n      if (!ref.current.contains(e.target)) {\n        onTriggered === null || onTriggered === void 0 ? void 0 : onTriggered(e);\n      }\n    }\n  }, [ref.current, onTriggered]);\n  var eventsConfig = react.useMemo(function () {\n    return [[disableClick, 'click', clickOrTouchListener], [disableTouch, 'touchstart', clickOrTouchListener], [disableKeys, 'keyup', keyListener]];\n  }, [disableClick, disableTouch, disableKeys, clickOrTouchListener, keyListener]);\n  react.useEffect(function () {\n    eventsConfig.map(function (eventConfigItem) {\n      var isDisabled = eventConfigItem[0],\n          eventName = eventConfigItem[1],\n          listener = eventConfigItem[2];\n\n      if (!isDisabled) {\n        document.addEventListener(eventName, listener);\n      }\n    });\n    return function () {\n      eventsConfig.map(function (eventConfigItem) {\n        var isDisabled = eventConfigItem[0],\n            eventName = eventConfigItem[1],\n            listener = eventConfigItem[2];\n\n        if (!isDisabled) {\n          document.removeEventListener(eventName, listener);\n        }\n      });\n    };\n  }, [eventsConfig]);\n  return ref;\n}\n\nexports.useDetectClickOutside = useDetectClickOutside;","map":{"version":3,"mappings":";;;;;AAaA;;;;;;SAIgBA,sBAAsBC,IAO9B;MANNC,WAAW;MACXC,YAAY;MACZC,YAAY;MACZC,WAAW;MACXC,WAAW;MACXC,WAAW;EAEX,IAAMC,GAAG,GAAGC,aAAO,IAAPA,CAAZ;EAEA,IAAMC,WAAW,GAAGC,kBAClB,UAACC,CAAD,EAAiB;IACf,IAAIN,WAAJ,EAAiB;MACfJ,WAAW,CAACU,CAAD,CAAX;IACD,CAFD,MAEO,IAAIL,WAAJ,EAAiB;MACtB,IAAIA,WAAW,CAACM,QAAZ,CAAqBD,CAAC,CAACE,GAAvB,CAAJ,EAAiC;QAC/BZ,WAAW,CAACU,CAAD,CAAX;MACD;IACF,CAJM,MAIA;MACL,IAAIA,CAAC,CAACE,GAAF,KAAU,QAAd,EAAwB;QACtBZ,WAAW,CAACU,CAAD,CAAX;MACD;IACF;EACF,CAbiBD,EAclB,CAACL,WAAD,EAAcC,WAAd,EAA2BL,WAA3B,CAdkBS,CAApB;EAiBA,IAAMI,oBAAoB,GAAGJ,kBAC3B,UAACC,CAAD,EAA2B;IACzB,IAAIJ,GAAG,IAAIA,GAAG,CAACQ,OAAf,EAAwB;MACtB,IAAI,CAAER,GAAG,CAACQ,OAAJ,CAAqBC,QAArB,CAA8BL,CAAC,CAACM,MAAhC,CAAN,EAA+C;QAC7ChB,WAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAGU,CAAH,CAAX;MACD;IACF;EACF,CAP0BD,EAQ3B,CAACH,GAAG,CAACQ,OAAL,EAAcd,WAAd,CAR2BS,CAA7B;EAWA,IAAMQ,YAAY,GAAsBC,cACtC;IAAM,QACJ,CAACjB,YAAD,EAAe,OAAf,EAAwBY,oBAAxB,CADI,EAEJ,CAACX,YAAD,EAAe,YAAf,EAA6BW,oBAA7B,CAFI,EAGJ,CAACV,WAAD,EAAc,OAAd,EAAuBK,WAAvB,CAHI;EAIL,CALqCU,EAMtC,CAACjB,YAAD,EAAeC,YAAf,EAA6BC,WAA7B,EAA0CU,oBAA1C,EAAgEL,WAAhE,CANsCU,CAAxC;EASAC,gBAAU;IACRF,YAAY,CAACG,GAAb,CAAiB,UAACC,eAAD,EAAgB;MACxB,cAAU,GAAyBA,eAAe,GAAlD;MAAA,IAAYC,SAAS,GAAcD,eAAe,GAAlD;MAAA,IAAuBE,QAAQ,GAAIF,eAAe,GAAlD;;MAEP,IAAI,CAACG,UAAL,EAAiB;QACfC,QAAQ,CAACC,gBAAT,CAA0BJ,SAA1B,EAAqCC,QAArC;MACD;IACF,CAND;IAQA,OAAO;MACLN,YAAY,CAACG,GAAb,CAAiB,UAACC,eAAD,EAAgB;QACxB,cAAU,GAAyBA,eAAe,GAAlD;QAAA,IAAYC,SAAS,GAAcD,eAAe,GAAlD;QAAA,IAAuBE,QAAQ,GAAIF,eAAe,GAAlD;;QAEP,IAAI,CAACG,UAAL,EAAiB;UACfC,QAAQ,CAACE,mBAAT,CAA6BL,SAA7B,EAAwCC,QAAxC;QACD;MACF,CAND;IAOD,CARD;EASD,CAlBDJ,EAkBG,CAACF,YAAD,CAlBHE;EAoBA,OAAOb,GAAP;AACF","names":["useDetectClickOutside","_a","onTriggered","disableClick","disableTouch","disableKeys","allowAnyKey","triggerKeys","ref","useRef","keyListener","useCallback","e","includes","key","clickOrTouchListener","current","contains","target","eventsConfig","useMemo","useEffect","map","eventConfigItem","eventName","listener","isDisabled","document","addEventListener","removeEventListener"],"sources":["/home/yair/Desktop/what i delete form project/node_modules/react-detect-click-outside/src/useDetectClickOutside.tsx"],"sourcesContent":["import { useCallback, useEffect, useMemo, useRef } from 'react';\n\ninterface Props {\n  onTriggered: (e: Event) => void;\n  disableClick?: boolean;\n  disableTouch?: boolean;\n  disableKeys?: boolean;\n  allowAnyKey?: boolean;\n  triggerKeys?: string[];\n}\n\ntype EventConfigItem = [boolean | undefined, string, (e: Event) => void];\n\n/**\n * Hook used to detect clicks outside a component (or an escape key press). onTriggered function is triggered on `click`, `touch` or escape `keyup` event.\n *\n */\nexport function useDetectClickOutside({\n  onTriggered,\n  disableClick,\n  disableTouch,\n  disableKeys,\n  allowAnyKey,\n  triggerKeys,\n}: Props) {\n  const ref = useRef(null);\n\n  const keyListener = useCallback(\n    (e: KeyboardEvent) => {\n      if (allowAnyKey) {\n        onTriggered(e);\n      } else if (triggerKeys) {\n        if (triggerKeys.includes(e.key)) {\n          onTriggered(e);\n        }\n      } else {\n        if (e.key === 'Escape') {\n          onTriggered(e);\n        }\n      }\n    },\n    [allowAnyKey, triggerKeys, onTriggered]\n  );\n\n  const clickOrTouchListener = useCallback(\n    (e: MouseEvent | TouchEvent) => {\n      if (ref && ref.current) {\n        if (!(ref.current! as any).contains(e.target)) {\n          onTriggered?.(e);\n        }\n      }\n    },\n    [ref.current, onTriggered]\n  );\n\n  const eventsConfig: EventConfigItem[] = useMemo(\n    () => [\n      [disableClick, 'click', clickOrTouchListener],\n      [disableTouch, 'touchstart', clickOrTouchListener],\n      [disableKeys, 'keyup', keyListener],\n    ],\n    [disableClick, disableTouch, disableKeys, clickOrTouchListener, keyListener]\n  );\n\n  useEffect(() => {\n    eventsConfig.map((eventConfigItem) => {\n      const [isDisabled, eventName, listener] = eventConfigItem;\n\n      if (!isDisabled) {\n        document.addEventListener(eventName, listener);\n      }\n    });\n\n    return () => {\n      eventsConfig.map((eventConfigItem) => {\n        const [isDisabled, eventName, listener] = eventConfigItem;\n\n        if (!isDisabled) {\n          document.removeEventListener(eventName, listener);\n        }\n      });\n    };\n  }, [eventsConfig]);\n\n  return ref;\n}\n"]},"metadata":{},"sourceType":"script"}