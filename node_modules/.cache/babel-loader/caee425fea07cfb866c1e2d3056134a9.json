{"ast":null,"code":"'use strict';\n\nvar IsCallable = require('es-abstract/2021/IsCallable');\n\nvar functionsHaveNames = require('functions-have-names')();\n\nvar callBound = require('call-bind/callBound');\n\nvar $functionToString = callBound('Function.prototype.toString');\nvar $stringMatch = callBound('String.prototype.match');\nvar classRegex = /^class /;\n\nvar isClass = function isClassConstructor(fn) {\n  if (IsCallable(fn)) {\n    return false;\n  }\n\n  if (typeof fn !== 'function') {\n    return false;\n  }\n\n  try {\n    var match = $stringMatch($functionToString(fn), classRegex);\n    return !!match;\n  } catch (e) {}\n\n  return false;\n};\n\nvar regex = /\\s*function\\s+([^(\\s]*)\\s*/;\nvar functionProto = Function.prototype;\n\nmodule.exports = function getName() {\n  if (!isClass(this) && !IsCallable(this)) {\n    throw new TypeError('Function.prototype.name sham getter called on non-function');\n  }\n\n  if (functionsHaveNames) {\n    return this.name;\n  }\n\n  if (this === functionProto) {\n    return '';\n  }\n\n  var str = $functionToString(this);\n  var match = $stringMatch(str, regex);\n  var name = match && match[1];\n  return name;\n};","map":{"version":3,"names":["IsCallable","require","functionsHaveNames","callBound","$functionToString","$stringMatch","classRegex","isClass","isClassConstructor","fn","match","e","regex","functionProto","Function","prototype","module","exports","getName","TypeError","name","str"],"sources":["/home/yair/Desktop/Programming/what i delete form project/node_modules/function.prototype.name/implementation.js"],"sourcesContent":["'use strict';\n\nvar IsCallable = require('es-abstract/2021/IsCallable');\nvar functionsHaveNames = require('functions-have-names')();\nvar callBound = require('call-bind/callBound');\nvar $functionToString = callBound('Function.prototype.toString');\nvar $stringMatch = callBound('String.prototype.match');\n\nvar classRegex = /^class /;\n\nvar isClass = function isClassConstructor(fn) {\n\tif (IsCallable(fn)) {\n\t\treturn false;\n\t}\n\tif (typeof fn !== 'function') {\n\t\treturn false;\n\t}\n\ttry {\n\t\tvar match = $stringMatch($functionToString(fn), classRegex);\n\t\treturn !!match;\n\t} catch (e) {}\n\treturn false;\n};\n\nvar regex = /\\s*function\\s+([^(\\s]*)\\s*/;\n\nvar functionProto = Function.prototype;\n\nmodule.exports = function getName() {\n\tif (!isClass(this) && !IsCallable(this)) {\n\t\tthrow new TypeError('Function.prototype.name sham getter called on non-function');\n\t}\n\tif (functionsHaveNames) {\n\t\treturn this.name;\n\t}\n\tif (this === functionProto) {\n\t\treturn '';\n\t}\n\tvar str = $functionToString(this);\n\tvar match = $stringMatch(str, regex);\n\tvar name = match && match[1];\n\treturn name;\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,6BAAD,CAAxB;;AACA,IAAIC,kBAAkB,GAAGD,OAAO,CAAC,sBAAD,CAAP,EAAzB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIG,iBAAiB,GAAGD,SAAS,CAAC,6BAAD,CAAjC;AACA,IAAIE,YAAY,GAAGF,SAAS,CAAC,wBAAD,CAA5B;AAEA,IAAIG,UAAU,GAAG,SAAjB;;AAEA,IAAIC,OAAO,GAAG,SAASC,kBAAT,CAA4BC,EAA5B,EAAgC;EAC7C,IAAIT,UAAU,CAACS,EAAD,CAAd,EAAoB;IACnB,OAAO,KAAP;EACA;;EACD,IAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;IAC7B,OAAO,KAAP;EACA;;EACD,IAAI;IACH,IAAIC,KAAK,GAAGL,YAAY,CAACD,iBAAiB,CAACK,EAAD,CAAlB,EAAwBH,UAAxB,CAAxB;IACA,OAAO,CAAC,CAACI,KAAT;EACA,CAHD,CAGE,OAAOC,CAAP,EAAU,CAAE;;EACd,OAAO,KAAP;AACA,CAZD;;AAcA,IAAIC,KAAK,GAAG,4BAAZ;AAEA,IAAIC,aAAa,GAAGC,QAAQ,CAACC,SAA7B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,GAAmB;EACnC,IAAI,CAACX,OAAO,CAAC,IAAD,CAAR,IAAkB,CAACP,UAAU,CAAC,IAAD,CAAjC,EAAyC;IACxC,MAAM,IAAImB,SAAJ,CAAc,4DAAd,CAAN;EACA;;EACD,IAAIjB,kBAAJ,EAAwB;IACvB,OAAO,KAAKkB,IAAZ;EACA;;EACD,IAAI,SAASP,aAAb,EAA4B;IAC3B,OAAO,EAAP;EACA;;EACD,IAAIQ,GAAG,GAAGjB,iBAAiB,CAAC,IAAD,CAA3B;EACA,IAAIM,KAAK,GAAGL,YAAY,CAACgB,GAAD,EAAMT,KAAN,CAAxB;EACA,IAAIQ,IAAI,GAAGV,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAzB;EACA,OAAOU,IAAP;AACA,CAdD"},"metadata":{},"sourceType":"script"}